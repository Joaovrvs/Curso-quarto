x <- 4
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(0)
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(0)
# Output the estimates
cat("Monte Carlo estimate:", monte_carlo_estimate, "\n")
cat("True value from pnorm:", true_value, "\n")
# Set the value of x for the Uniform distribution
x <- 10
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(0)
# Output the estimates
cat("Monte Carlo estimate:", monte_carlo_estimate, "\n")
cat("True value from pnorm:", true_value, "\n")
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Function to estimate standard normal CDF using Monte Carlo simulation
monte_carlo_normal_cdf <- function(x, n_samples) {
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
proportion <- mean(samples <= 0)
# Return the estimated CDF value
return(proportion)
}
# Set the number of Monte Carlo samples
n_samples <- 10000
# Set the value of x for the Uniform distribution
x <- 10
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(0)
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
proportion <- mean(samples <= 0)
monte_carlo_normal_cdf <- function(x, n_samples) {
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- sum(samples <= 0) / n_samples
# Return the estimated CDF value
return(cdf_estimate)
}
# Set the number of Monte Carlo samples
n_samples <- 10000
# Set the value of x for the Uniform distribution
x <- 4  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(0)
# Output the estimates
cat("Monte Carlo estimate:", monte_carlo_estimate, "\n")
cat("True value from pnorm:", true_value, "\n")
monte_carlo_normal_cdf <- function(x, n_samples) {
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp^((-samples^2)/2)) * 2
# Return the estimated CDF value
return(cdf_estimate)
}
# Set the number of Monte Carlo samples
n_samples <- 10000
# Set the value of x for the Uniform distribution
x <- 4  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
monte_carlo_normal_cdf <- function(x, n_samples) {
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
monte_carlo_normal_cdf <- function(x, n_samples) {
monte_carlo_normal_cdf <- function(x, n_samples) {
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp^((-1*(samples^2)/2))) * 2
# Return the estimated CDF value
return(cdf_estimate)
}
# Set the number of Monte Carlo samples
n_samples <- 10000
monte_carlo_normal_cdf <- function(x, n_samples) {
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp^((-1*(samples^2)/2))) * 2
# Return the estimated CDF value
return(cdf_estimate)
}
# Set the number of Monte Carlo samples
n_samples <- 10000
# Set the value of x for the Uniform distribution
x <- 4  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp^((-1*(samples^2)/2))) * 2
samples^2
samples^2/2
exp^((-1*(samples^2)/2))
exp^((-(samples^2)/2))
exp^((-1*(samples^2))
exp^((-1*(samples^2)))
exp^(((samples^2)/2))
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp((-1*(samples^2)/2))) * 2
monte_carlo_normal_cdf <- function(x, n_samples) {
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp((-1*(samples^2)/2))) * 2
# Return the estimated CDF value
return(cdf_estimate)
}
# Set the number of Monte Carlo samples
n_samples <- 10000
# Set the value of x for the Uniform distribution
x <- 4  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(0)
# Output the estimates
cat("Monte Carlo estimate:", monte_carlo_estimate, "\n")
cat("True value from pnorm:", true_value, "\n")
# Set the value of x for the Uniform distribution
x <- 5  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(0)
# Output the estimates
cat("Monte Carlo estimate:", monte_carlo_estimate, "\n")
cat("True value from pnorm:", true_value, "\n")
# Set the value of x for the Uniform distribution
x <- 10  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(0)
# Output the estimates
cat("Monte Carlo estimate:", monte_carlo_estimate, "\n")
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(10)
# Output the estimates
cat("Monte Carlo estimate:", monte_carlo_estimate, "\n")
cat("True value from pnorm:", true_value, "\n")
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(2)
# Output the estimates
cat("Monte Carlo estimate:", monte_carlo_estimate, "\n")
# Set the value of x for the Uniform distribution
x <- 2  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(2)
# Output the estimates
cat("Monte Carlo estimate:", monte_carlo_estimate, "\n")
cat("True value from pnorm:", true_value, "\n")
monte_carlo_normal_cdf <- function(x, n_samples) {
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- (mean(exp((-1*(samples^2)/2)))) * 2
# Return the estimated CDF value
return(cdf_estimate)
}
# Set the number of Monte Carlo samples
n_samples <- 10000
# Set the value of x for the Uniform distribution
x <- 2  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(2)
# Output the estimates
cat("Monte Carlo estimate:", monte_carlo_estimate, "\n")
cat("True value from pnorm:", true_value, "\n")
# Set the number of Monte Carlo samples
n_samples <- 50000
# Set the value of x for the Uniform distribution
x <- 2  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(2)
# Output the estimates
cat("Monte Carlo estimate:", monte_carlo_estimate, "\n")
cat("True value from pnorm:", true_value, "\n")
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- (mean(exp((-1*(samples^2)/2)))) * 2
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- (mean(exp((-1*(samples^2)/2)))) * 2
monte_carlo_normal_cdf <- function(x, n_samples) {
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- (mean(exp((-*(samples^2)/2)))) * 2
# Set the number of Monte Carlo samples
n_samples <- 50000
monte_carlo_normal_cdf <- function(x, n_samples) {
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- (mean(exp((-(samples^2)/2)))) * 2
# Return the estimated CDF value
return(cdf_estimate)
}
# Set the number of Monte Carlo samples
n_samples <- 50000
# Set the value of x for the Uniform distribution
x <- 2  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples)
# Compute true value of standard normal CDF using pnorm
true_value <- pnorm(2)
# Output the estimates
cat("Monte Carlo estimate:", monte_carlo_estimate, "\n")
cat("True value from pnorm:", true_value, "\n")
monte_carlo_normal_cdf <- function(x, n_samples,n_simulations) {
# Generate random samples from Uniform(0, x)
sim<-numeric(n_simulations)
for (i in length(sim) ) {
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp((-(samples^2)/2))) * 2
sim[i]<-cdf_estimate
}
# Return the estimated CDF value
return(cdf_estimate)
}
n_simulation<- 10000
monte_carlo_normal_cdf <- function(x, n_samples,n_simulations) {
# Generate random samples from Uniform(0, x)
sim<-numeric(n_simulations)
for (i in length(sim) ) {
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp((-(samples^2)/2))) * 2
sim[i]<-cdf_estimate
retur}
# Return the estimated CDF value
return(sim)
}
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
n_simulations<- 10000
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
monte_carlo_normal_cdf <- function(x, n_samples,n_simulations) {
# Generate random samples from Uniform(0, x)
sim<-numeric(n_simulations)
for (i in length(sim) ) {
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp((-(samples^2)/2))) * 2
sim[i]<-cdf_estimate}
# Return the estimated CDF value
return(sim)
}
# Set the number of Monte Carlo samples
n_samples <- 50000
n_simulations<- 10000
# Set the value of x for the Uniform distribution
x <- 2  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
monte_carlo_normal_cdf <- function(x, n_samples,n_simulations) {
# Generate random samples from Uniform(0, x)
sim<-numeric(n_simulations)
for (i in length(sim) ) {
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp((-(samples^2)/2))) * 2
sim[i]<-cdf_estimate
return(sim)}
# Return the estimated CDF value
return(sim)
}
# Set the number of Monte Carlo samples
n_samples <- 50000
n_simulations<- 10000
# Set the value of x for the Uniform distribution
x <- 2  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
monte_carlo_normal_cdf <- function(x, n_samples,n_simulations) {
# Generate random samples from Uniform(0, x)
sim<-numeric(n_simulations)
for (i in length(n_simulations) ) {
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp((-(samples^2)/2))) * 2
sim[i]<-cdf_estimate
return(sim)}
# Return the estimated CDF value
return(sim)
}
# Set the number of Monte Carlo samples
n_samples <- 50000
n_simulations<- 10000
# Set the value of x for the Uniform distribution
x <- 2  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
monte_carlo_estimate
monte_carlo_normal_cdf <- function(x, n_samples,n_simulations) {
# Generate random samples from Uniform(0, x)
sim<-numeric(n_simulations)
for (i in i:length(n_simulations) ) {
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp((-(samples^2)/2))) * 2
sim[i]<-cdf_estimate
return(sim)}
# Return the estimated CDF value
return(sim)
}
# Set the number of Monte Carlo samples
n_samples <- 50000
n_simulations<- 10000
# Set the value of x for the Uniform distribution
x <- 2  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
monte_carlo_normal_cdf <- function(x, n_samples,n_simulations) {
# Generate random samples from Uniform(0, x)
sim<-numeric(n_simulations)
for ( i:length(n_simulations) ) {
# Set the number of Monte Carlo samples
n_samples <- 50000
monte_carlo_normal_cdf <- function(x, n_samples,n_simulations) {
# Generate random samples from Uniform(0, x)
sim<-numeric(n_simulations)
for (1 in  i:length(n_simulations) ) {
monte_carlo_normal_cdf <- function(x, n_samples,n_simulations) {
# Generate random samples from Uniform(0, x)
sim<-numeric(n_simulations)
for (i in i:length(n_simulations) ) {
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp((-(samples^2)/2))) * 2
sim[i]<-cdf_estimate
return(sim)}
# Return the estimated CDF value
return(sim)
}
# Set the number of Monte Carlo samples
n_samples <- 50000
n_simulations<- 10000
# Set the value of x for the Uniform distribution
x <- 2  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
monte_carlo_normal_cdf <- function(x, n_samples,n_simulations) {
# Generate random samples from Uniform(0, x)
sim<-numeric(n_simulations)
for (i in 1:length(n_simulations) ) {
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp((-(samples^2)/2))) * 2
sim[i]<-cdf_estimate
return(sim)}
# Return the estimated CDF value
return(sim)
}
# Set the number of Monte Carlo samples
n_samples <- 50000
n_simulations<- 10000
# Set the value of x for the Uniform distribution
x <- 2  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
monte_carlo_normal_cdf <- function(x, n_samples,n_simulations) {
# Generate random samples from Uniform(0, x)
sim<-numeric(n_simulations)
for (i in 1:n_simulations)  {
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp((-(samples^2)/2))) * 2
sim[i]<-cdf_estimate
return(sim)}
# Return the estimated CDF value
return(sim)
}
# Set the number of Monte Carlo samples
n_samples <- 50000
n_simulations<- 10000
# Set the value of x for the Uniform distribution
x <- 2  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
monte_carlo_normal_cdf <- function(x, n_samples,n_simulations) {
# Generate random samples from Uniform(0, x)
sim<-numeric(n_simulations)
for (i in 1:n_simulations)  {
samples <- runif(n_samples, min = 0, max = x)
# Calculate the proportion of samples that are less than or equal to 0
cdf_estimate <- mean(exp((-(samples^2)/2))) * 2
sim[i]<-cdf_estimate
return(sim)}
}
# Set the number of Monte Carlo samples
n_samples <- 50000
n_simulations<- 10000
# Set the value of x for the Uniform distribution
x <- 2  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
monte_carlo_normal_cdf <- function(x, n_samples,n_simulations) {
sim<-numeric(n_simulations)
for (i in 1:n_simulations)  {
samples <- runif(n_samples, min = 0, max = x)
cdf_estimate <- mean(exp((-(samples^2)/2))) * 2
sim[i]<-cdf_estimate
return(sim)}
}
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
######
monte_carlo_normal_cdf <- function(x, n_samples, n_simulations) {
# Initialize vector to store simulation results
sim <- numeric(n_simulations)
# Perform Monte Carlo simulations
for (i in 1:n_simulations) {
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the Monte Carlo estimate of the standard normal CDF
cdf_estimate <- mean(exp(-(samples^2)/2)) * 2
# Store the result in the vector
sim[i] <- cdf_estimate
}
# Return the vector of simulation results
return(sim)
}
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
######
monte_carlo_normal_cdf <- function(x, n_samples, n_simulations) {
# Initialize vector to store simulation results
sim <- numeric(n_simulations)
# Perform Monte Carlo simulations
for (i in 1:n_simulations) {
# Generate random samples from Uniform(0, x)
samples <- runif(n_samples, min = 0, max = x)
# Calculate the Monte Carlo estimate of the standard normal CDF
cdf_estimate <- mean(exp(-(samples^2)/2)) * 2
# Store the result in the vector
sim[i] <- cdf_estimate
}
# Return the vector of simulation results
return(sim)
}
# Set the number of Monte Carlo samples
n_samples <- 50000
n_simulations<- 10000
# Set the value of x for the Uniform distribution
x <- 2  # Adjusting the value of x
# Compute Monte Carlo estimate of standard normal CDF
monte_carlo_estimate <- monte_carlo_normal_cdf(x, n_samples,n_simulations)
# Output the estimates
cat("Monte Carlo estimate:", monte_carlo_estimate, "\n")
install.packages(palmepenguins)
install.packages(palmerpenguins)
install.packages("palmerpenguins")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(palmerpenguins)
library(tidyverse)
glimpse(penguins)
## usando mutate para filtrar dados
mutate_simples <- mutate(penguins,tamanho_nadadeira =
if_else(flipper_length_mm > 200, "longa", "curta"))
glimpse(mutate_simples)
# usnado pipe nativo
nadadeiras<- penguins |>
mutate(tamanho_nadadeira =
if_else(flipper_length_mm > 200, "longa", "curta")) |>
# Filtrando NA na variavel
filter(!is.na(tamanho_nadadeira)) |>
summarise(media_bico= mean(bill_length_mm),
desv_pad_bico= sd(bill_length_mm),
.by = tamanho_nadadeira)
View(nadadeiras)
## Mudando diretório
setwd('C:/Users/João/Documents/Curso quarto')
